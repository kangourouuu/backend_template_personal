package v2

import (
	"net/http"
	"strconv"
	"fmt"
	"encoding/json"

	"{{.ProjectName}}/dto"
	"{{.ProjectName}}/model"
	"{{.ProjectName}}/service"
	"{{.ProjectName}}/internal/redis"

	"github.com/sirupsen/logrus"
	"github.com/gin-gonic/gin"
)

type {{.EntityName}}Handler struct {
	{{.EntityNameLower}}Service service.{{.EntityName}}Service
	redisClient redis.IRedis
}

func New{{.EntityName}}Handler({{.EntityNameLower}}Service service.{{.EntityName}}Service, redisClient redis.IRedis) *{{.EntityName}}Handler {
	return &{{.EntityName}}Handler{ 
	{{.EntityNameLower}}Service: {{.EntityNameLower}}Service,
	redisClient: redisClient }
}

func (h *{{.EntityName}}Handler) Create{{.EntityName}}(c *gin.Context) {
	var req dto.Create{{.EntityName}}Request
	if err := c.ShouldBindJSON(&req); err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": "Invalid request"})
		return
	}

	obj := &model.{{.EntityName}}{
	{{- range .Fields }}
		{{- if ne .Name "ID" }} // ne : not equal
		{{.Name}}: req.{{.Name}},
		{{- end }}
	{{- end }}
	}

	if err := h.{{.EntityNameLower}}Service.Create{{.EntityName}}(obj); err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": "Failed to create {{.EntityNameLower}}"})
		return
	}

	resp := dto.{{.EntityName}}Response{
	{{- range .Fields }}
		{{.Name}}: obj.{{.Name}},
	{{- end }}
	}

	if h.redisClient != nil {
		// convert struct to json
		respJSON, err := json.Marshal(resp)
		if err != nil {
			fmt.Println("Can not convert data")
		} else {
			redisKey := "{{.EntityNameLower}}_" + strconv.Itoa(resp.ID)
			str, err := h.redisClient.Set(redisKey, string(respJSON))
			if err != nil {
				fmt.Println("Can not set data to redis cache")
			} else {
				fmt.Println("Successfully cached data " + str )
			}
		}
	} else {
		fmt.Println("Redis is not ready")
	}
	c.JSON(http.StatusCreated, resp)
}

func (h *{{.EntityName}}Handler) Get{{.EntityName}}(c *gin.Context) {
	id, err := strconv.Atoi(c.Param("id"))
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": "Invalid ID"})
		return
	}

	obj, err := h.{{.EntityNameLower}}Service.Get{{.EntityName}}ByID(uint(id))
	if err != nil {
		c.JSON(http.StatusNotFound, gin.H{"error": "{{.EntityName}} not found"})
		return
	}

	resp := &dto.{{.EntityName}}Response{
	{{- range .Fields }}
		{{.Name}}: obj.{{.Name}},
	{{- end }}
	}
	if h.redisClient != nil {
		_, err := json.Marshal(resp)
		if err != nil {
			fmt.Println("Can not convert data")
		} else {
			redisKey := "{{ .EntityNameLower}}_" + strconv.Itoa(resp.ID)
			str, err := h.redisClient.Get(redisKey)
			if err != nil {
				fmt.Println("No data found on cache")
			} else {
				err := json.Unmarshal([]byte(str), resp)
				if err != nil {
					logrus.Info("Failed to Unmarshal")
				}
				fmt.Println("Data cached in Redis - Key:", redisKey, "Result: ", str)
			}
		}
	} else {
		fmt.Println("Redis is not ready")
	}
	c.JSON(http.StatusOK, resp)
}

func (h *{{.EntityName}}Handler) GetAll{{.EntityName}}s(c *gin.Context) {
	list, err := h.{{.EntityNameLower}}Service.GetAll{{.EntityName}}s()
	if err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": "Failed to get {{.EntityNameLower}}s"})
		return
	}

	var resp []dto.{{.EntityName}}Response
	for _, s := range list {
		resp = append(resp, dto.{{.EntityName}}Response{
		{{- range .Fields }}
			{{.Name}}: s.{{.Name}},
		{{- end }}
		})
	}

	c.JSON(http.StatusOK, resp)
}

func (h *{{.EntityName}}Handler) Update{{.EntityName}}(c *gin.Context) {
	id, err := strconv.Atoi(c.Param("id"))
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": "Invalid ID"})
		return
	}

	existing{{.EntityName}}, err := h.{{$.EntityNameLower}}Service.Get{{.EntityName}}ByID(uint(id))
	if err != nil {
		c.JSON(http.StatusNotFound, gin.H{"error": "{{.EntityName}} not found"})
		return
	}

	var req dto.Update{{.EntityName}}Request
	if err := c.ShouldBindJSON(&req); err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": "Invalid request"})
		return
	}

	{{.EntityNameLower}} := &model.{{$.EntityName}}{
	{{- range .Fields }}
		{{- if eq .Name "ID" }}
		{{.Name}}: existing{{$.EntityName}}.{{.Name}},
		{{- else }}
		{{.Name}}: req.{{.Name}},
		{{- end }}
	{{- end }}
	}

	if err := h.{{$.EntityNameLower}}Service.Update{{.EntityName}}({{.EntityNameLower}}); err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": "Failed to update {{$.EntityNameLower}}"})
		return
	}

	resp := dto.{{$.EntityName}}Response{
	{{- range .Fields }}
		{{.Name}}: {{$.EntityNameLower}}.{{.Name}},
	{{- end }}
	}

	c.JSON(http.StatusOK, resp)
}

func (h *{{.EntityName}}Handler) Delete{{.EntityName}}(c *gin.Context) {
	id, err := strconv.Atoi(c.Param("id"))
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": "Invalid ID"})
		return
	}

	_, err = h.{{.EntityNameLower}}Service.Get{{.EntityName}}ByID(uint(id))
	if err != nil {
		c.JSON(http.StatusNotFound, gin.H{"error": "{{.EntityName}} not found"})
		return
	}

	err = h.{{.EntityNameLower}}Service.Delete{{.EntityName}}(uint(id))
	if err != nil {
		if err.Error() == "id not found" {
			c.JSON(http.StatusNotFound, gin.H{"error": "ID not found"})
		}

		c.JSON(http.StatusInternalServerError, gin.H{"error": "Failed to delete {{ .EntityNameLower }}"})
		return
	}

	if h.redisClient != nil {
		redisKey := "{{ .EntityNameLower}}_" + strconv.Itoa(id)
		deletedCount, err := h.redisClient.Delete(redisKey)
		if err != nil {
			fmt.Println("❌ Failed to delete from Redis cache:", err.Error())
		} else {
			if deletedCount > 0 {
				fmt.Println("🗑️ Successfully deleted from Redis cache - Key:", redisKey, "Count:", deletedCount)
			} else {
				fmt.Println("ℹ️ Key not found in Redis cache:", redisKey)
			}
		}
	} else {
		fmt.Println("⚠️ Redis client is not available - cache not deleted")
	}

	c.JSON(http.StatusOK, gin.H{"message": "{{.EntityName}} deleted successfully"})
}
