// @title {{.ProjectName}} Management API
// @version 1.0
// @description API for managing {{.ProjectName}}
// @host localhost:9002
// @BasePath /
package main

import (
	//"fmt"
	"net/http"
	"os"
	"path/filepath"
	"sync"

	v2 "{{ .ProjectName }}/api"
	"{{ .ProjectName }}/common/log"
	"{{ .ProjectName }}/internal"
	"{{ .ProjectName }}/internal/sqlclient"
	customMiddleware "{{ .ProjectName }}/middleware"
	"{{ .ProjectName }}/common/limiter"
	"{{ .ProjectName }}/internal/redis"

	"github.com/caarlos0/env/v10"
	"github.com/gin-gonic/gin"
	//"github.com/go-chi/chi/v5"
	//"github.com/go-chi/chi/v5/middleware"
	"github.com/sirupsen/logrus"
	"github.com/spf13/viper"
	swaggerFiles "github.com/swaggo/files"
	ginSwagger "github.com/swaggo/gin-swagger"

	//swaggerFiles
	//swaggerFiles
	//"gorm.io/driver/postgres" 
	_ "{{.ProjectName}}/docs"

	"gorm.io/gorm"
)

type Config struct {
	Dir     string `env:"CONFIG_DIR" envDefault:"configs/config.json"`
	Port    string
	LogType string
	LogFile string
	DB      string
	Redis   string
}

var config Config
var db *gorm.DB

func init() {
	// Parse environment variables
	if err := env.Parse(&config); err != nil {
		log.Fatal("Failed to parse environment variables: ", err)
	}

	// Initialize viper for configuration
	viper.SetConfigFile(config.Dir)
	viper.SetConfigType("json")
	if err := viper.ReadInConfig(); err != nil {
		log.Fatal("Failed to read config file: ", err)
	}

	// Set config values from viper
	config = Config{
		Dir:     config.Dir,
		Port:    viper.GetString("main.port"),
		LogType: viper.GetString("main.log_type"),
		LogFile: viper.GetString("main.log_file"),
		DB:      viper.GetString("main.db"),
		Redis:   viper.GetString("main.redis"),
	}

	// Initialize logger
	if config.LogType == "FILE" {
		if err := os.MkdirAll(filepath.Dir(config.LogFile), 0755); err != nil {
			log.Fatal("Failed to create log directory: ", err)
		}
		f, err := os.OpenFile(config.LogFile, os.O_APPEND|os.O_CREATE|os.O_WRONLY, 0644)
		if err != nil {
			log.Fatal("Failed to open log file: ", err)
		}
		logrus.SetOutput(f)
	}

	// Initialize repository if DB is enabled
	if config.DB == "enabled" {
		gormsql := sqlclient.GormSqlConfig{
			Driver:   "postgresql",
			Host:     viper.GetString("db.host"),
			Port:     viper.GetInt("db.port"),
			Database: viper.GetString("db.database"),
			Username: viper.GetString("db.username"),
			Password: viper.GetString("db.password"),
		}
		initRepo(gormsql)
	}
	if config.Redis == "enabled" {
	var err error
	redis.Redis, err = redis.NewRedis(redis.RedisConfig{
		Addr:         viper.GetString("redis.address"),
		Password:     viper.GetString("redis.password"),
		DB:           viper.GetInt("redis.db"),
		Poolsize:     15,
		PoolTimeOut:  15,
		IdleTimeOut:  15,
		ReadTimeOut:  15,
		WriteTimeOut: 15,
	})

	if err != nil {
		panic(err)
	}

	limiter.RateLimit = limiter.NewRateLimiter(viper.GetString(`redis.address`), viper.GetString(`redis.password`))
	}
}

func initRepo(gormSqlConfig sqlclient.GormSqlConfig) {
	internal.GormSqlClient = sqlclient.NewGormSqlClient(gormSqlConfig)
	db = internal.GormSqlClient.GetDB()
}

func main() {
	if config.DB != "enabled" {
		logrus.Fatal("Database is disabled, cannot start server")
	}

	logrus.Infof("DB name from config: %s", viper.GetString("db.database"))

	router := gin.Default()
	router.GET("/swagger/*any", ginSwagger.WrapHandler(swaggerFiles.Handler))
	router.GET("/openapi.json", func(c *gin.Context) {
		c.File("./docs/swagger.json")
	})

	// Apply middleware
	router.Use(customMiddleware.AuthMiddleWare())

	// Register API routes
	v2.SetupRoutes(router, db)

	// Start server
	wg := sync.WaitGroup{}
	wg.Add(1)
	go func() {
		defer wg.Done()
		logrus.Info("Server starting on port ", config.Port, " ============")
		if err := http.ListenAndServe(":"+config.Port, router); err != nil {
			logrus.Fatal("Failed to start server: ", err)
		}
	}()
	wg.Wait()
}

//@Summary Lấy tất cả {{.EntityNameLower}}
//@Description Trả về thông tin danh sách {{ .EntityNameLower }}
//@Tags {{ .EntityNameLower }}
//@Produce json 
//@Param id path int true "{{ .EntityNameLower }} ID" 
//@Success 200 {object} model.{{.EntityName}} 
//@Router /{{ .EntityNameLower }} [get] 
func GetAll{{.EntityName}}s(c *gin.Context) {}

// @Summary Lấy {{.EntityNameLower}} theo ID
// @Description Trả về thông tin {{.EntityNameLower}} theo ID
// @Tags {{.EntityNameLower}}
// @Produce json
// @Param id path int true "{{.EntityNameLower}} ID"
// @Success 200 {object} model.{{.EntityName}}
// @Router /{{.EntityNameLower}}/{id} [get]
func Get{{.EntityName}}(c *gin.Context) {}

// @Summary Thêm mới {{.EntityNameLower}}
// @Description Thêm một đôi {{.EntityNameLower}} mới vào hệ thống
// @Tags {{.EntityNameLower}}
// @Accept json
// @Produce json
// @Param data body model.{{.EntityName}} true "{{.EntityNameLower}} info"
// @Success 201 {object} model.{{.EntityName}}
// @Router /{{.EntityNameLower}} [post]
func Create{{.EntityName}}(c *gin.Context) {}

// @Summary Xoá {{.EntityNameLower}}
// @Description Xoá một đôi {{.EntityNameLower}} theo ID
// @Tags {{.EntityNameLower}}
// @Produce json
// @Param id path int true "{{.EntityNameLower}} ID"
// @Success 204
// @Router /{{.EntityNameLower}}/{id} [delete]
func Delete{{.EntityName}}(c *gin.Context) {}

// @Summary Cập nhật {{.EntityNameLower}}
// @Description Cập nhật thông tin một đôi {{.EntityNameLower}}
// @Tags {{.EntityNameLower}}
// @Accept json
// @Produce json
// @Param id path int true "{{.EntityNameLower}} ID"
// @Param data body model.{{.EntityName}} true "{{.EntityNameLower}} info"
// @Success 200 {object} model.{{.EntityName}}
// @Router /{{.EntityNameLower}}/{id} [put]
func Update{{.EntityName}}(c *gin.Context) {}
